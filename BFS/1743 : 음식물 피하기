import java.io.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int n = Integer.parseInt(st.nextToken());
		int m = Integer.parseInt(st.nextToken());
		int k = Integer.parseInt(st.nextToken());
		boolean[][] trash = new boolean[n + 1][m + 1];


		for(int i = 0; i < k; i++) {
			st = new StringTokenizer(br.readLine());
			int x = Integer.parseInt(st.nextToken());
			int y = Integer.parseInt(st.nextToken());
			trash[x][y] = true;
		}
		int max = 0;
		for(int i = 1; i <= n; i++) {
			for(int j = 1; j <= m; j++) {
				if(trash[i][j]) {
					max = Math.max(max, bfs(i, j, trash));
				}
			}
		}
		System.out.println(max);
	}

	public static int bfs(int x, int y, boolean[][] trash) {
		int[] dx = {-1, 0, 1, 0};
		int[] dy = {0, -1, 0, 1};
		Queue<int[]> queue = new LinkedList<>();
		int cnt = 0;
		queue.add(new int[]{x, y});
		cnt++;
		trash[x][y] = false;


		while(!queue.isEmpty()) {
			int[] cur = queue.poll();
			int cx = cur[0];
			int cy = cur[1];
			for(int i = 0; i < 4; i++) {
				int nx = cx + dx[i];
				int ny = cy + dy[i];
				if(nx >= 1 && nx <= trash.length - 1 && ny >= 1 && ny <= trash[0].length - 1 && trash[nx][ny]) {
						cnt++;
						trash[nx][ny] = false;
						queue.add(new int[]{nx, ny});

				}
			}

		}

		return cnt;
	}



}
