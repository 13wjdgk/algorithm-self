import java.util.*;
import java.io.*;

public class Main {
	static int[] parent;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int N = Integer.parseInt(br.readLine());
		parent = new int[N];

		StringBuilder sb = new StringBuilder();
		int[][] graph = new int[N][N];
		int total = 0;

		PriorityQueue<int[]> pq = new PriorityQueue<>( new Comparator<>(){

			@Override
			public int compare(int[] a, int[] b){
				return a[0]-b[0];
			}

		});

		for(int n =0;n<N;n++){
			char[] str = br.readLine().toCharArray();
			int[] nums = new int[N];
			for(int i =0;i<N;i++){
				nums[i] = charToLength(str[i]);
				total+=nums[i];
				if(nums[i]==0 || i==n) continue;
				pq.add(new int[] {nums[i],n,i});
			}
			parent[n] = n;
			graph[n] = nums;
		}

		while(!pq.isEmpty()){
			int[] edge = pq.poll();
			if(union(edge[1],edge[2])) total-=edge[0];

		}

		int firstParent = find(0);
		boolean flag = false;
		for(int i = 1;i<N;i++){
			if(firstParent!=find(i)){
				flag = true;
				break;
			}
		}
		if(flag)
			System.out.println(-1);
		else
			System.out.println(total);

	}

	public static int find(int x){
		if(x==parent[x]) return x;
		return parent[x] = find(parent[x]);

	}

	public static boolean union(int x,int y){
		int nx = find(x);
		int ny = find(y);
		if(nx!=ny){
			if(ny>nx){
				parent[nx] = ny;
			}else{
				parent[ny] = nx;
			}

			return true;
		}
		return false;

	}

	public static int charToLength(char c) {
		if (c == '0') return 0;
		if (c >= 'a' && c <= 'z') return c - 'a' + 1;
		return c - 'A' + 27;
	}

}
