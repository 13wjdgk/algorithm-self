import java.io.BufferedReader;

import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.Map;
import java.util.StringTokenizer;

public class Main {
	static int R,C;
	static char[][] board;
	static boolean[] duplicate = new boolean[26];
	static int[] dc = {0,+1,0,-1};

	static int[] dr = {-1,0,+1,0};
	static int result = 0;
	public static void main(String[] args) throws Exception{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		StringTokenizer st = new StringTokenizer(br.readLine());
		R = Integer.parseInt(st.nextToken());
		C = Integer.parseInt(st.nextToken());

		board = new char[R][C];
		for(int r=0;r<R;r++){
			String str = br.readLine();
			for(int c=0;c<C;c++){
				board[r][c] = str.charAt(c);
			}
		}
		duplicate[board[0][0]-'A'] = true;
		findMax(0,0,1);
		System.out.println(result);

	}

	public static void findMax(int r , int c,int cnt){
		if(result<cnt){
			result = cnt;
		}
		for(int i =0;i<4;i++){
			int nextR = r+dr[i];
			int nextC = c+dc[i];
			if(0<=nextC&&nextC<C&&0<=nextR&&nextR<R){
				char alpha = board[nextR][nextC];
				if(!duplicate[alpha-'A']){
					duplicate[alpha-'A'] = true;
					findMax(nextR,nextC,cnt+1);
					duplicate[alpha-'A'] = false;
				}
			}
		}
	}
}


