import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	static int X;
	static int Y;
	static int[][] board ;
	static boolean[][] visited;
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		Y = Integer.parseInt(st.nextToken());
		X = Integer.parseInt(st.nextToken());
		board = new int[Y][X];

		for(int y = 0;y<Y;y++){
			st = new StringTokenizer(br.readLine());
			for(int x =0;x<X;x++){
				board[y][x] = Integer.parseInt(st.nextToken());
			}
		}
		int year = 0;
		boolean isAllMelt = false;
		while(true){
			//빙산 덩어리 체크
			int cnt = countIceberg();
			if(isAllMelt&cnt<2){
				System.out.println(0);
				break;
			}
			if(cnt>1){
				System.out.println(year);
				break;
			}
			isAllMelt = melting();
			year++;
		}
	}

	private static boolean melting() {
		int[] dx = {0,+1,0,-1};
		int[] dy = {-1,0,+1,0};
		int[][] melts = new int[Y][X];
		boolean flag = true;
		for(int y = 0;y<Y;y++){
			for(int x =0;x<X;x++){
				int melt = 0;
				for(int i =0;i<4;i++){
					int nextX = dx[i]+x;
					int nextY = dy[i]+y;
					if(0<=nextX&nextX<X&0<=nextY&nextY<Y){
						if(board[nextY][nextX] == 0 ){
							melt++;

						}
					}
				}
				melts[y][x] = melt;
			}
		}
		for(int y = 0;y<Y;y++){
			for(int x =0;x<X;x++){
				board[y][x] =Math.max(board[y][x]-melts[y][x],0);
				if(board[y][x]>0){
					flag = false;
				}
			}
		}


		return flag;
	}

	private static int countIceberg() {
		visited = new boolean[Y][X];
		int count = 0;
		for(int y = 0;y<Y;y++){
			for(int x =0;x<X;x++){
				if (board[y][x]>0&&!visited[y][x]){
					bfsIceberg(x,y);
					count++;
				}
			}
		}
		return count;
	}

	private static void bfsIceberg(int x,int y){
		int[] dx = {0,+1,0,-1};
		int[] dy = {-1,0,+1,0};
		Queue<int[]> q = new LinkedList<>();
		q.add(new int[]{x,y});
		while(!q.isEmpty()){
			int[] node = q.poll();
			x = node[0];
			y = node[1];
			for(int i =0;i<4;i++){
				int nextX = dx[i]+x;
				int nextY = dy[i]+y;
				if(0<=nextX&nextX<X&0<=nextY&nextY<Y){
					if(board[nextY][nextX] > 0 && !visited[nextY][nextX]){
						q.add(new int[]{nextX,nextY});
						visited[nextY][nextX] = true;

					}
				}
			}
		}
	}

}
