import java.util.*;
import java.io.*;

// 테스트 코드 (선택)
public class Main {

	static Set<Integer> shelters = new HashSet<>();
	static int minDis = Integer.MAX_VALUE;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		StringTokenizer st = new StringTokenizer(br.readLine());

		int N = Integer.parseInt(st.nextToken());
		int K = Integer.parseInt(st.nextToken());
		int[][] houseLocations = new int[N][2];
		int[][] locationDistance = new int[N][N];

		for(int n =0;n<N;n++){
			st = new StringTokenizer(br.readLine());
			houseLocations[n][0] = Integer.parseInt(st.nextToken());
			houseLocations[n][1] = Integer.parseInt(st.nextToken());
		}

		for(int first = 0;first<N;first++){
			for(int sec = first+1;sec<N;sec++){
				int distance = Math.abs(houseLocations[first][0]-houseLocations[sec][0]) + Math.abs(houseLocations[first][1]-houseLocations[sec][1]);
				locationDistance[first][sec] = distance;
				locationDistance[sec][first] = distance;
			}
		}



		getMinDistance(K,N,locationDistance,-1);
		System.out.println(minDis);


	}


	private static void getMinDistance(int K,int N,int[][] locationDistance,int start){
		if(shelters.size() == K){
			int maxDis = 0;
			for(int house = 0;house<N;house++){
				int minHouse = Integer.MAX_VALUE;
				if(shelters.contains(house)) continue;
				for(Integer s : shelters) {
					minHouse = Math.min(minHouse,locationDistance[s][house]);
				}
				maxDis = Math.max(maxDis, minHouse);
			}
			minDis = Math.min(maxDis,minDis);
		}else{
			for(int s = start+1;s<N;s++){
				shelters.add(s);
				getMinDistance(K,N,locationDistance,s);
				shelters.remove(s);
			}
		}
	}
}
