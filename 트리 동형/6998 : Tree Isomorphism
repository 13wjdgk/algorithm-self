import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;
import java.util.*;

public class Main {

    	static class Node{
		int value;
		List<Node> children = new ArrayList<>();
		public Node(int index){
			value = index;
		}
	}

	static int index = 0;
	static Node parseTree(String[] tree){
		if(index>= tree.length || tree[index].equals("#")){
			index++;
			return null;
		}

		Node node = new Node(index);
		index++;
		while (index< tree.length && !tree[index].equals("#")){
			Node child = parseTree(tree);
			if(child != null){
				node.children.add(child);
			}
			index++;
		}
		return node;
	}

	static String getHashTree(Node node){
		List<String> childrenHash = new ArrayList<>();
		List<Node> children = node.children;
		if( children.isEmpty() ){
			return "()";
		}else{
			for(Node child : children){
				String hash = getHashTree(child);
				childrenHash.add(hash);
			}
		}

		StringBuilder sb = new StringBuilder();
		sb.append("(");
		Collections.sort(childrenHash);
		for(String hash : childrenHash){
			sb.append(hash);
		}
		sb.append(")");
		return sb.toString();

	}

	private static boolean solveTreeIsomorphism(String one, String two) {
		String[] firstTreeStr = one.split(" ");
		String[] secondTreeStr = two.split(" ");

		index = 0;
		Node firstRootNode = parseTree(firstTreeStr);

		index = 0;
		Node secRootNode = parseTree(secondTreeStr);

		String firstTreeHash = getHashTree(firstRootNode);

		String secTreeHash = getHashTree(secRootNode);
		if(firstTreeHash.equals(secTreeHash)){
			return true;
		}

		return false;
	}

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        Scanner sc = new Scanner(br.readLine());
        int numTests = sc.nextInt();

        for (int i = 0; i < numTests; i++) {
            String line1 = br.readLine();
            String line2 = br.readLine();

            System.out.println("The two trees are " + (solveTreeIsomorphism(line1, line2) ? "isomorphic." : "not isomorphic."));
        }
        br.close();
    }
}
